from db.db import SQLighter;
from env.api_token import API_TOKEN
from env.yookassa import YOO_API_TOKEN
from utils import *
from buttons import *

from aiogram import Bot, Dispatcher, executor, types;
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types.message import ContentType
import json
import datetime
import random

db = SQLighter("db/recept.db")

bot = Bot(token = API_TOKEN)
dp = Dispatcher(bot)

data = {}

recepts = {
    '–ó–∞–≤—Ç—Ä–∞–∫–∏': 'zavtraki',
    '–ó–∞–∫—É—Å–∫–∏': 'zakuski', 
    '–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞': 'osnovnye-blyuda', 
    '–ü–∞—Å—Ç–∞-–ü–∏—Ü—Ü–∞': 'pasta-picca', 
    '–°–∞–ª–∞—Ç—ã': 'salaty', 
    '–°—É–ø—ã': 'supy', 
    '–°–µ–Ω–¥–≤–∏—á–∏': 'sendvichi', 
    '–í—ã–ø–µ—á–∫–∞-–î–µ—Å–µ—Ä—Ç—ã': 'vypechka-deserty',
    'zavtraki': '–ó–∞–≤—Ç—Ä–∞–∫–∏',
    'zakuski': '–ó–∞–∫—É—Å–∫–∏', 
    'osnovnye-blyuda': '–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞', 
    'pasta-picca': '–ü–∞—Å—Ç–∞-–ü–∏—Ü—Ü–∞', 
    'salaty': '–°–∞–ª–∞—Ç—ã', 
    'supy': '–°—É–ø—ã', 
    'sendvichi': '–°–µ–Ω–¥–≤–∏—á–∏', 
    'vypechka-de serty': '–í—ã–ø–µ—á–∫–∞-–î–µ—Å–µ—Ä—Ç—ã'
}

categories = ['–ó–∞–≤—Ç—Ä–∞–∫–∏', '–ó–∞–∫—É—Å–∫–∏', '–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞', '–ü–∞—Å—Ç–∞-–ü–∏—Ü—Ü–∞', '–°–∞–ª–∞—Ç—ã', '–°—É–ø—ã', '–°–µ–Ω–¥–≤–∏—á–∏', '–í—ã–ø–µ—á–∫–∞-–î–µ—Å–µ—Ä—Ç—ã', '–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã']

time_categories = {
    '20-25 –º–∏–Ω—É—Ç': '0-25 –º–∏–Ω—É—Ç',
    '25-50 –º–∏–Ω—É—Ç': '25-50 –º–∏–Ω—É—Ç',
    '–±–æ–ª–µ–µ 50-60 –º–∏–Ω—É—Ç': '50-600 –º–∏–Ω—É—Ç',
    '–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è': '0-600 –º–∏–Ω—É—Ç'
}

sub_days = {
    'sub_week': 7,
    'sub_month': 30,
    'sub_season': 90,
    'sub_half_year': 180
    }

@dp.message_handler(commands= ['start'])
async def def_welcome(message: types.Message):
    if (not db.is_user(message.from_user.id)):
        db.add_user(message.from_user.id, message.from_user.first_name, message.from_user.last_name) 
        db.add_start_subscription(message.from_user.id)
    sub = db.get_subscription(message.from_user.id)['data']

    if not sub['status']:
        await bot.send_message(message.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞üòû\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–Ω–æ–≤—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ–ª–µ–µ —á–µ–º 2000 —Ä–µ—Ü–µ–ø—Ç–∞–º, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–ª–∏—Ç—åüïì¬ª", reply_markup=welcome(False))
        return

    if sub['description']['is_fulltime']:
        await bot.send_message(message.from_user.id, "–£ –í–∞—Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", reply_markup=welcome(True))
        return
    if sub['description']['datetime_finaly']['is_current']:
        await bot.send_message(message.from_user.id, f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {sub['description']['datetime_finaly']['datetime']}", reply_markup=welcome(True))
        return
    if sub['description']['counter']:
        await bot.send_message(message.from_user.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤: {sub['description']['counter']}", reply_markup=welcome(True))
        return

@dp.callback_query_handler(lambda callback: callback.data == 'menu')
async def def_menu(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=menu())

@dp.callback_query_handler(lambda callback: callback.data == 'lesson')
async def def_lesson(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id, """
–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ–ª–µ–µ —á–µ–º 2000 —Ä–µ—Ü–µ–ø—Ç–∞–º, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É  

üíª –ï—Å–ª–∏ –≤—ã –Ω–∏ —Ä–∞–∑—É –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–æ–º, –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å. –û–Ω –ø—Ä–æ—Å—Ç–æ–π –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏ –±—ã—Å—Ç—Ä–æ –æ—Å–≤–∞–∏–≤–∞–µ–º—ã–π.

 1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω—É–∂–Ω—ã–π –í–∞–º –≤–∏–¥ –±–ª—é–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä –∑–∞–≤—Ç—Ä–∞–∫).
 2. –ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è.
 3. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–¥–∞—ë—Ç—Å—è —Å–ø–∏—Å–æ–∫ –±–ª—é–¥, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ –í–∞—à–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏.
 4. –ö–ª–∏–∫–∞–µ—Ç–µ –Ω–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–µ—Å—è –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç""", reply_markup=welcome(False))

@dp.message_handler(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
async def def_menu_message(message: types.Message):
    db.set_state_counter(message.from_user.id, 0)
    if db.get_subscription(message.from_user.id)['data']['status']:
        await bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=menu())
    else: 
        await bot.send_message(message.from_user.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞üòû\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–Ω–æ–≤—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ–ª–µ–µ —á–µ–º 2000 —Ä–µ—Ü–µ–ø—Ç–∞–º, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–ª–∏—Ç—åüïì¬ª', reply_markup=welcome(False))

@dp.message_handler(text= '–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤üîé')
async def def_search_recepts(message: types.Message):
    db.set_state_counter(message.from_user.id, 0)
    if db.get_subscription(message.from_user.id)['data']['status']:
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=search_recepts())
    else:
        await bot.send_message(message.from_user.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞üòû\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–Ω–æ–≤—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ–ª–µ–µ —á–µ–º 2000 —Ä–µ—Ü–µ–ø—Ç–∞–º, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–ª–∏—Ç—åüïì¬ª', reply_markup=welcome(False))

@dp.message_handler(text= categories)
async def def_time_to_dish(message: types.Message):
    if db.get_subscription(message.from_user.id)['data']['status']:
        if message.text != '–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã': db.set_state_dish(message.from_user.id, recepts[message.text])
        else: db.set_state_dish(message.from_user.id, recepts[categories[random.randint(0, 7)]])
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è', reply_markup=time_to_dish())
    else:
        await bot.send_message(message.from_user.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞üòû\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–Ω–æ–≤—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ–ª–µ–µ —á–µ–º 2000 —Ä–µ—Ü–µ–ø—Ç–∞–º, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–ª–∏—Ç—åüïì¬ª', reply_markup=welcome(False))

@dp.message_handler(text= ['20-25 –º–∏–Ω—É—Ç', '25-50 –º–∏–Ω—É—Ç', '–±–æ–ª–µ–µ 50-60 –º–∏–Ω—É—Ç', '–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è'])
async def def_recept(message: types.Message):
    if db.get_subscription(message.from_user.id)['data']['status']:
        time = time_categories[message.text]
        db.set_state_time(message.from_user.id, time.split(' ')[0])
        await bot.send_message(message.from_user.id, f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {db.get_state_counter(message.from_user.id) + 1}:', reply_markup=recepts_page(db.get_recepts_page(message.from_user.id)))
    else:
        await bot.send_message(message.from_user.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞üòû\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–Ω–æ–≤—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ–ª–µ–µ —á–µ–º 2000 —Ä–µ—Ü–µ–ø—Ç–∞–º, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–ª–∏—Ç—åüïì¬ª', reply_markup=welcome(False))

@dp.callback_query_handler(lambda callback: callback.data in ['next_page', 'prev_page'])
async def def_next_page(call: types.CallbackQuery):
    if call.data == 'next_page': 
        db.set_increment_page(call.from_user.id)
        page = db.get_recepts_page(call.from_user.id)
        if len(page) == 0:
            db.set_decrement_page(call.from_user.id)    
    else: db.set_decrement_page(call.from_user.id)
    try:
        await call.message.edit_text(f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ <b>{db.get_state_counter(call.from_user.id) + 1}</b>:', reply_markup=recepts_page(db.get_recepts_page(call.from_user.id)), parse_mode='HTML')
    except:
        pass

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("/recepty/"))
async def def_page_dish(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    sub = db.get_subscription(call.from_user.id)
    if sub['data']['status']:
        if not sub['data']['description']['is_fulltime'] or not sub['data']['description']['datetime_finaly']['is_current']: 
            db.decrement_counter_subscription(call.from_user.id)
        await bot.send_message(call.from_user.id, '–û–∂–∏–¥–∞–π—Ç–µ...')
        ingredients = db.get_ingredients(call.data)
        ingredients_string = '<b>–°–ø–∏—Å–æ–∫ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤</b>\n' + '\n'.join([item[1] + ' : ' + item[2] for item in ingredients])
        
        instruction = data[call.data.split('/')[2]][call.data]['instructions']
        instruction_string = '\n\n<b>–†–µ—Ü–µ–ø—Ç</b>\n' + '\n\n'.join(item for item in instruction)

        photo = db.get_photo_dish(call.data.split('/')[2], call.data)

        try:
            if photo['img']: await bot.send_photo(call.from_user.id, photo=photo['img'], caption= (f'<b>{photo["name"]}</b>\n\n' + ingredients_string + instruction_string), reply_markup=menu(), parse_mode="HTML")
            else: await bot.send_message(call.from_user.id, f'<b>{photo["name"]}</b>\n\n' + ingredients_string + instruction_string, reply_markup=menu(), parse_mode="HTML")
        except:
            await bot.send_photo(call.from_user.id, photo=photo["img"])
            await bot.send_message(call.from_user.id, f'<b>{photo["name"]}</b>\n\n' + ingredients_string + instruction_string, reply_markup=menu(), parse_mode="HTML")
    else:
        await bot.send_message(call.from_user.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞üòû\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–Ω–æ–≤—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ–ª–µ–µ —á–µ–º 2000 —Ä–µ—Ü–µ–ø—Ç–∞–º, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–ª–∏—Ç—åüïì¬ª', reply_markup=welcome(False))

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'pay')
async def def_page_pay(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id, '''
    <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏</b>
    7 –¥–Ω–µ–π    99.99‚ÇΩ   <s>159.99‚ÇΩ</s>
    30 –¥–Ω–µ–π    199.99‚ÇΩ  <s>459.99‚ÇΩ</s>
    90 –¥–Ω–µ–π    489.99‚ÇΩ  <s>959.99‚ÇΩ</s>
    180 –¥–Ω–µ–π    899.99‚ÇΩ  <s>1599.99‚ÇΩ</s>''', parse_mode="HTML", reply_markup=subscription())

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('sub_'))
async def def_sub(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    price = 9999
    if (call.data == 'sub_month'): price = 19999
    elif (call.data == 'sub_season'): price = 48999
    elif (call.data == 'sub_half_year'): price = 89999

    await bot.send_invoice(call.from_user.id, title='–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏', description='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ–ª–µ–µ —á–µ–º 2000 —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞', payload=call.data, provider_token=YOO_API_TOKEN, currency='RUB', start_parameter='test_bot', prices=[{'label': '—Ä—É–±', 'amount': price}])

@dp.pre_checkout_query_handler()
async def pre_checkout_query_handler(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def def_process_pay(message: types.Message):
    db.set_subscription_time(message.from_user.id, datetime.datetime.now() + datetime.timedelta(days=sub_days[message.successful_payment.invoice_payload]))

    end_sub = db.get_subscription(message.from_user.id)['data']['description']['datetime_finaly']['datetime']
    await bot.send_message(message.from_user.id, f'<b>–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞.</b>\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {end_sub}', reply_markup=menu(), parse_mode='HTML')

    await bot.send_message(394248224, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} {message.from_user.last_name} (#{message.from_user.id}) –ø—Ä–∏–æ–±—Ä—ë–ª –ø–æ–¥–ø–∏—Å–∫—É!\n\n–°—Ä–æ–∫: {sub_days[message.successful_payment.invoice_payload]} –¥–Ω–µ–π')

@dp.message_handler(text= '–ü—Ä–æ—Ñ–∏–ª—åüíº')
async def def_profile(message: types.Message):
    profile = db.get_profile(message.from_user.id)
    sub = db.get_subscription(message.from_user.id)
    sub_str = '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫'

    if sub['data']['status']:
        if sub['data']['description']['is_fulltime']:
            sub_str = '–ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è'
        elif sub['data']['description']['datetime_finaly']['is_current']:
            sub_str = f"–î–æ {sub['data']['description']['datetime_finaly']['datetime']}"
        else:
            sub_str = f"{sub['data']['description']['counter']} —Ä–µ—Ü–µ–ø—Ç"
            if sub['data']['description']['counter'] != 1:
                sub_str += '–∞'

    await bot.send_message(message.from_user.id, f'''
<b>{profile[2]} {profile[3]}</b>
<b>–ü–æ–¥–ø–∏—Å–∫–∞</b>: {sub_str}

<b>telegram id:</b> {profile[1]}
<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {profile[4][:-7]}
<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å:</b> {recepts[profile[5]]}
    ''', parse_mode='HTML')

@dp.message_handler(text= '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ü§ù')
async def def_support(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–æ–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å @korotkovand', reply_markup=menu())

@dp.message_handler(text= '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä')
async def def_konstructor_ref(message: types.Message):
    await bot.send_message(message.from_user.id, '<b>–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å–ø–∏—Å–æ–∫ –∏–º–µ—é—â–∏—Ö—Å—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤.</b>\n\n–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞: ', reply_markup=basket(db.get_konstructor(message.from_user.id)), parse_mode='HTML')
    await bot.send_message(message.from_user.id, '–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫ —Ä—è–¥–æ–º —Å –Ω—É–∂–Ω—ã–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º')

@dp.message_handler()
async def def_konstructor(message: types.Message):
    db.set_konstructor(message.from_user.id, [item.strip() for item in message.text.split(',')])
    await bot.send_message(message.from_user.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", reply_markup=basket(db.get_konstructor(message.from_user.id)))

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("/basket/"))
async def def_delete_ingredient(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    db.delete_ingredient(call.from_user.id, call.data[9:-1].split(',')[1][2:-1])
    await bot.send_message(call.from_user.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", reply_markup=basket(db.get_konstructor(call.from_user.id)))

@dp.callback_query_handler(lambda callback_query: callback_query.data in ['start_konstructor'])
async def def_start_konstructor(call: types.CallbackQuery):
    if db.get_subscription(call.from_user.id)['data']['status']:
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.send_message(call.from_user.id, '–û–∂–∏–¥–∞–π—Ç–µ...')
        urls = db.konstructor([ item[1] for item in db.get_konstructor(call.from_user.id)])
        if len(urls):
            page_dish = db.create_page_konstructor(urls)

            await bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=recepts_page(page_dish, False))
        else: 
            await bot.send_message(call.from_user.id, '''<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –í–∞—Å...</b>
            
–í–æ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –±–ª—é–¥:<b>
–°–æ–ª—å
–ú–æ–ª–æ—Ç—ã–π —á–µ—Ä–Ω—ã–π –ø–µ—Ä–µ—Ü
–ß–µ—Å–Ω–æ–∫
–°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ     
–°–∞—Ö–∞—Ä
–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ
–†–µ–ø—á–∞—Ç—ã–π –ª—É–∫
–ö—É—Ä–∏–Ω–æ–µ —è–π—Ü–æ
–í–æ–¥–∞
–ü–æ–º–∏–¥–æ—Ä—ã
–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –º–∞—Å–ª–æ
–ü—à–µ–Ω–∏—á–Ω–∞—è –º—É–∫–∞
–ú–æ—Ä–∫–æ–≤—å</b>
            
–î–æ–±–∞–≤—å—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫ —Å–µ–±–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Å—å—Ä—É–∫—Ç–æ—Ä –∑–∞–Ω–æ–≤–æ''', reply_markup=basket(db.get_konstructor(call.from_user.id)), parse_mode='HTML')
    
    else:
        await bot.send_message(call.from_user.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞üòû\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–Ω–æ–≤—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ–ª–µ–µ —á–µ–º 2000 —Ä–µ—Ü–µ–ø—Ç–∞–º, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–ª–∏—Ç—åüïì¬ª', reply_markup=welcome(False))

if __name__ == "__main__":
    with open('data/main_data.json', 'r', encoding='utf8') as file:
        data = json.load(file)
    print('DB is started...')
    print('Success to work...')
    executor.start_polling(dp, skip_updates=True)

    # db.most_popular_ingredients()        

    # print(db.konstructor(data = ['—Ö–ª–µ–±', '–Ø–π—Ü–æ', '–º–æ–ª–æ–∫–æ', '–±–∞–Ω–∞–Ω—ã', '–∫–∞—Ä–¥–∞–º–æ–Ω']))